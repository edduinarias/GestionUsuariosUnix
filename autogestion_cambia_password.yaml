---
- name: "Actualizar Clave de Usuario {{ tower_user_name }}"
  hosts: all
  gather_facts: yes
  gather_timeout: 15
  vars:
    enviarmail: 'Si'
    nueva_password:
    email_host: "172.22.88.6"
    email_from: "edduin.arias.Ext@claro.com.co"
    correo_destino: "{{ tower_user_email }}"
    email_subject: "AutoGestion Cambio de Clave Servidor Unix"
    email_port: 25
    new_password_hash: "{{ nueva_password | password_hash('sha512', 'S4ltHpuX99') }}"

  tasks:

    - name: "Verificar si el usuario existe en el host remoto"
      ansible.builtin.command: "id {{ tower_user_name }}"
      register: usuario_existe
      ignore_errors: yes
      changed_when: false

    - name: "Validar que nueva_password no esté vacía"
      ansible.builtin.fail:
        msg: "La variable nueva_password no puede estar vacía"
      when: nueva_password is not defined or nueva_password == ""

    # ================== HP-UX ==================
    - name: Cambiando Password usuarios en HP-UX
      ansible.builtin.raw: |
        /usr/sbin/usermod -p '{{ new_password_hash }}' {{ tower_user_name }}
      when:
        - ansible_facts['os_family'] == 'HP-UX'
        - usuario_existe.rc == 0
      register: estado_cambio_hpux
      ignore_errors: yes

    # ================== Linux ==================
    - name: "Cambiar contraseña de usuario en sistemas Linux"
      ansible.builtin.user:
        name: "{{ tower_user_name }}"
        password: "{{ nueva_password | password_hash('sha512') }}"
        update_password: always
      register: estado_cambio_linux
      when:
        - tower_user_name is defined
        - usuario_existe.rc == 0
        - ansible_facts['os_family'] in ['RedHat', 'Debian', 'Suse', 'AlmaLinux']

    - name: "Desbloquear cuenta en Linux"
      ansible.builtin.command: "passwd -u {{ tower_user_name }}"
      when:
        - tower_user_name is defined
        - usuario_existe.rc == 0
        - ansible_facts['os_family'] in ['RedHat', 'Debian', 'Suse', 'AlmaLinux']
      ignore_errors: yes

    - name: "Resetear intentos fallidos faillock"
      ansible.builtin.command: "faillock --user {{ tower_user_name }} --reset"
      ignore_errors: yes
      failed_when: false
      when:
        - ansible_facts['os_family'] in ['RedHat', 'Debian', 'Suse', 'AlmaLinux']

    - name: "Resetear intentos fallidos pam_tally"
      ansible.builtin.command: "pam_tally2 --user={{ tower_user_name }} --reset"
      ignore_errors: yes
      failed_when: false
      when:
        - ansible_facts['os_family'] in ['RedHat', 'Debian', 'Suse', 'AlmaLinux']

    # ============================================================
    # [AIX] Cambio de contraseña
    # ============================================================

    - name: "[AIX] Cambiar contraseña de usuario usando expect"
      ansible.builtin.expect:
        command: "passwd {{ tower_user_name }}"
        responses:
          "(?i)new password": "{{ nueva_password }}"
          "(?i)re-enter": "{{ nueva_password }}"
        timeout: 30
      register: estado_cambio_aix
      when:
        - ansible_facts['os_family'] == 'AIX'
        - usuario_existe.rc == 0
      ignore_errors: yes

    - name: "[AIX] Quitar flag de cambio forzado de contraseña"
      ansible.builtin.command: "pwdadm -c {{ tower_user_name }}"
      when:
        - ansible_facts['os_family'] == 'AIX'
        - usuario_existe.rc == 0
      ignore_errors: yes

    # ============================================================
    # [Solaris]
    # ============================================================
    - name: "[Solaris] Generar hash SHA-256 compatible"
      ansible.builtin.shell: |
        python3 -c 'import crypt; print(crypt.crypt("{{ nueva_password }}", crypt.mksalt(crypt.METHOD_SHA256)))'
      register: pass_hash
      when:
        - usuario_existe.rc == 0
        - ansible_facts['os_family'] == 'Solaris'
      changed_when: false

    - name: "[Solaris] Actualizar campo de contraseña en /etc/shadow"
      ansible.builtin.replace:
        path: /etc/shadow
        regexp: '^({{ tower_user_name }}):[^:]*:(.*)$'
        replace: '\1:{{ pass_hash.stdout }}:\2'
        backup: yes
      register: estado_cambio_solaris
      when:
        - ansible_facts['os_family'] == 'Solaris'
        - usuario_existe.rc == 0

    # ================== Resultado ==================
    - name: "Registrar resultados del cambio de contraseña"
      ansible.builtin.set_fact:
        cambio_resultado:
          host: "{{ inventory_hostname }}"
          usuario: "{{ tower_user_name | default('Desconocido') }}"
          estado: >-
            {% if usuario_existe.rc is defined and usuario_existe.rc != 0 %}
              Usuario no existe
            {% elif (estado_cambio_linux is defined and estado_cambio_linux.changed | default(false)) %}
              Éxito
            {% elif (estado_cambio_hpux is defined and estado_cambio_hpux.rc | default(1) == 0) %}
              Éxito
            {% elif (estado_cambio_aix is defined and estado_cambio_aix.rc | default(1) == 0) %}
              Éxito
            {% elif (estado_cambio_solaris is defined and estado_cambio_solaris.changed | default(false)) %}
              Éxito
            {% else %}
              Falló
            {% endif %}
          error: >-
            {% if usuario_existe.rc is defined and usuario_existe.rc != 0 %}
              Usuario no encontrado en el host remoto
            {% elif estado_cambio_hpux is defined %}
              {{ estado_cambio_hpux.stderr | default('') }}
            {% elif estado_cambio_linux is defined %}
              {{ estado_cambio_linux.stderr | default('') }}
            {% elif estado_cambio_aix is defined %}
              {{ estado_cambio_aix.stderr | default('') }}
            {% elif estado_cambio_solaris is defined %}
              {{ estado_cambio_solaris.stderr | default('') }}
            {% endif %}
      ignore_errors: yes

    # ================== Envío de correo ==================
    - name: "Enviar correo del Reporte"
      delegate_to: localhost
      become: false
      mail:
        host: "{{ email_host }}"
        port: "{{ email_port }}"
        subject: "{{ email_subject }}"
        subtype: html
        body: "{{ lookup('template', 'email_template_auto.j2') }}"
        from: "{{ email_from }}"
        to: "{{ correo_destino | default('edduin.arias.Ext@claro.com.co') }}"
        cc: "edduin.arias.Ext@claro.com.co"
      run_once: yes
      when: enviarmail == 'Si'
      ignore_errors: yes
    
